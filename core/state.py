from typing import Annotated, List, Dict, Optional, Union
from pydantic import BaseModel, Field

class JarvisState(BaseModel):
    """
    Represents the complete state passed through the LangGraph workflow for the Jarvis AI Assistant.
    This state is mutable and accumulates data across all stages of the multi-agent pipeline.
    """

    # === User Message ===

    user_input: str = Field(
        ...,
        description="Raw input text from the user at this stage of the conversation"
    )

    # === Chat History ===

    messages: Annotated[
        List[bytes],
        lambda old, new: old + new
    ] = Field(
        default_factory=list,
        description=(
            "Encoded message history used internally for LangGraph + pydantic_ai agents. "
            "Merges across nodes to maintain conversational context."
        )
    )

    # === NLU Parsing Results ===

    intent: Union[str, List[str]] = Field(
        default_factory=list,
        description=(
            "Identified user intent(s), such as 'send_email', 'schedule_meeting', or 'search_web'."
        )
    )

    entities: Dict[str, Union[str, List[str], Dict]] = Field(
        default_factory=dict,
        description=(
            "Structured named entities extracted from user input. "
            "May include names, dates, email addresses, or other task-relevant fields."
        )
    )

    actions: List[str] = Field(
        default_factory=list,
        description=(
            "Concrete action identifiers that map to which agents should be triggered. "
            "Examples: ['email', 'calendar', 'web_search']"
        )
    )

    # === Results from Specialized Agents ===

    email_result: Optional[Dict] = Field(
        default=None,
        description="Response payload from the Email Agent, if invoked."
    )

    calendar_result: Optional[Dict] = Field(
        default=None,
        description="Response payload from the Calendar Agent, if invoked."
    )

    contact_result: Optional[Dict] = Field(
        default=None,
        description="Response from the Contact Agent (e.g., resolved email or phone number)."
    )

    web_search_result: Optional[Dict] = Field(
        default=None,
        description="Search results or snippet summary from the Web Search Agent."
    )

    content_result: Optional[Dict] = Field(
        default=None,
        description="Output from the Content Creator Agent (e.g., blog post, email draft, etc.)."
    )

    # === Final Response ===

    final_response: Optional[str] = Field(
        default=None,
        description="Polished response generated by the Synthesizer Agent to present to the user."
    )
